// Mocks generated by Mockito 5.4.1 from annotations
// in start_up_app/test/authentication/data/repository/authentication_repository_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:start_up_app/common/core_data_source/helpers.dart' as _i3;
import 'package:start_up_app/common/core_data_source/hive/hive_helper.dart'
    as _i8;
import 'package:start_up_app/features/authentication/data/data_sources/auth_local_data_source.dart'
    as _i7;
import 'package:start_up_app/features/authentication/data/data_sources/auth_remote_data_source.dart'
    as _i5;
import 'package:start_up_app/features/authentication/data/models/user/user.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuccessResult_1<T> extends _i1.SmartFake
    implements _i3.SuccessResult<T> {
  _FakeSuccessResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_2 extends _i1.SmartFake implements _i4.IOSOptions {
  _FakeIOSOptions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_3 extends _i1.SmartFake
    implements _i4.AndroidOptions {
  _FakeAndroidOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_4 extends _i1.SmartFake implements _i4.LinuxOptions {
  _FakeLinuxOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_5 extends _i1.SmartFake
    implements _i4.WindowsOptions {
  _FakeWindowsOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_6 extends _i1.SmartFake implements _i4.WebOptions {
  _FakeWebOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_7 extends _i1.SmartFake implements _i4.MacOsOptions {
  _FakeMacOsOptions_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRemoteDataSource extends _i1.Mock
    implements _i5.IAuthRemoteDataSource {
  MockIAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> signUpUser({
    required String? name,
    required String? confirmPassword,
    required String? phone,
    required String? email,
    required String? password,
    required int? countryId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [],
          {
            #name: name,
            #confirmPassword: confirmPassword,
            #phone: phone,
            #email: email,
            #password: password,
            #countryId: countryId,
          },
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<_i2.User> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i2.User>);
  @override
  _i6.Future<_i2.User> getUserProfile() => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
      ) as _i6.Future<_i2.User>);
  @override
  _i6.Future<String> removeAccount({required String? password}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeAccount,
          [],
          {#password: password},
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<_i3.SuccessResult<_i2.User>> updateUserProfile({
    String? name,
    String? phone,
    String? email,
    String? image,
    String? password,
    int? countryId,
    int? cityId,
    int? areaId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #name: name,
            #phone: phone,
            #email: email,
            #image: image,
            #password: password,
            #countryId: countryId,
            #cityId: cityId,
            #areaId: areaId,
          },
        ),
        returnValue: _i6.Future<_i3.SuccessResult<_i2.User>>.value(
            _FakeSuccessResult_1<_i2.User>(
          this,
          Invocation.method(
            #updateUserProfile,
            [],
            {
              #name: name,
              #phone: phone,
              #email: email,
              #image: image,
              #password: password,
              #countryId: countryId,
              #cityId: cityId,
              #areaId: areaId,
            },
          ),
        )),
      ) as _i6.Future<_i3.SuccessResult<_i2.User>>);
  @override
  _i6.Future<int> forgetPassword({required String? mobile}) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgetPassword,
          [],
          {#mobile: mobile},
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
  @override
  _i6.Future<void> verifyCode({
    required int? userId,
    required String? code,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyCode,
          [],
          {
            #userId: userId,
            #code: code,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<String> resetPassword({
    required int? userId,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #userId: userId,
            #password: password,
          },
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
}

/// A class which mocks [IAuthLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthLocalDataSource extends _i1.Mock
    implements _i7.IAuthLocalDataSource {
  MockIAuthLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<String> get getUserToken => (super.noSuchMethod(
        Invocation.getter(#getUserToken),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i2.User getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _FakeUser_0(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        ),
      ) as _i2.User);
  @override
  _i6.Future<void> saveCurrentUser({required _i2.User? userModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentUser,
          [],
          {#userModel: userModel},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [HiveHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveHelper extends _i1.Mock implements _i8.HiveHelper {
  MockHiveHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
      ) as bool);
  @override
  bool get isOnBoardingFinished => (super.noSuchMethod(
        Invocation.getter(#isOnBoardingFinished),
        returnValue: false,
      ) as bool);
  @override
  String get getLanguage => (super.noSuchMethod(
        Invocation.getter(#getLanguage),
        returnValue: '',
      ) as String);
  @override
  set setLanguage(String? lang) => super.noSuchMethod(
        Invocation.setter(
          #setLanguage,
          lang,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  dynamic saveUser(_i2.User? user) => super.noSuchMethod(Invocation.method(
        #saveUser,
        [user],
      ));
  @override
  void resetUser() => super.noSuchMethod(
        Invocation.method(
          #resetUser,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic setDarkMode(bool? isDark) => super.noSuchMethod(Invocation.method(
        #setDarkMode,
        [isDark],
      ));
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i4.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_2(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i4.IOSOptions);
  @override
  _i4.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_3(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i4.AndroidOptions);
  @override
  _i4.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_4(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i4.LinuxOptions);
  @override
  _i4.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_5(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i4.WindowsOptions);
  @override
  _i4.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_6(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i4.WebOptions);
  @override
  _i4.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_7(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i4.MacOsOptions);
  @override
  _i6.Future<void> write({
    required String? key,
    required String? value,
    _i4.IOSOptions? iOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
    _i4.WebOptions? webOptions,
    _i4.MacOsOptions? mOptions,
    _i4.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<String?> read({
    required String? key,
    _i4.IOSOptions? iOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
    _i4.WebOptions? webOptions,
    _i4.MacOsOptions? mOptions,
    _i4.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
  @override
  _i6.Future<bool> containsKey({
    required String? key,
    _i4.IOSOptions? iOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
    _i4.WebOptions? webOptions,
    _i4.MacOsOptions? mOptions,
    _i4.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<void> delete({
    required String? key,
    _i4.IOSOptions? iOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
    _i4.WebOptions? webOptions,
    _i4.MacOsOptions? mOptions,
    _i4.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<Map<String, String>> readAll({
    _i4.IOSOptions? iOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
    _i4.WebOptions? webOptions,
    _i4.MacOsOptions? mOptions,
    _i4.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i6.Future<Map<String, String>>);
  @override
  _i6.Future<void> deleteAll({
    _i4.IOSOptions? iOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
    _i4.WebOptions? webOptions,
    _i4.MacOsOptions? mOptions,
    _i4.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
